version: 2.1

commands:
    install_awscli:
      description: Install AWS CLI v2
      steps:
      - run:
          name: Install AWS CLI v2
          command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
    install_ansible:
      description: Install Ansible v2
      steps:
      - run:
          name: Install Ansible v2
          command: |
              sudo apt update
              sudo apt install software-properties-common
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible -y
    install_nodejs:
      description: Install Node.js 13
      steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
              sudo apt install -y nodejs 
     
    destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
          workflow_ID:
              type: string 
              default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_ID>>
              aws s3 rm s3://udapeople-<<parameters.workflow_ID>> --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_ID>>
    revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      parameters:
        workflow_ID:
          type: string 
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure https://kvdb.io/2bqfdFsNU2jCvgyEVGiGHF/success_<< parameters.workflow_ID >>)
              if(( $SUCCESS==1 )); 
              then
               cd ~/project/backend
               npm install
               npm run migration:revert
              fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: FrontEnd UnitTest
          command: |
            cd frontend
            npm install
            npm test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: BackEnd UnitTest
          command: |
            cd backend
            npm install
            npm test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies                    
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: FrontEnd scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment     

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_ansible
      - install_awscli
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["12:d4:5b:42:53:e4:ea:fe:19:55:a5:24:83:01:54:94"]
       # attach workspace    
      - attach_workspace:
          at: ~/        
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment       
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
              cd backend
              npm i
              npm run build
              npm run migrations >> migrations_out.txt 
      - run:
          name: Send migration results to bucket
          command: |
            cd backend
            if grep -q "No migrations are qeueing" migrations_out.txt
            then
              curl -d '1' https://kvdb.io/2bqfdFsNU2jCvgyEVGiGHF/success_${CIRCLE_WORKFLOW_ID:0:7} 
            fi
      - destroy-environment
      - revert-migrations
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-dependencies]  
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
            
      # Here's where you will add some code to rollback on failure      
  deploy-backend:
    docker:
      - image: cimg/base:2022.04
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["12:d4:5b:42:53:e4:ea:fe:19:55:a5:24:83:01:54:94"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: package backend
          command: |
            cd backend
            npm i
            npm run build
            cd ../
            tar -czf artifact.tar.gz backend
            cp artifact.tar.gz .circleci/ansible/roles/deploy/tasks/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=.migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      - image: cimg/base:2022.04
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            export API_URL=http://${BACKEND_IP}:3030
            if curl -s ${API_URL}/api/status | grep "ok"
            then 
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_TEST=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_TEST | grep "Welcome"
            then 
                exit 0
            else
                exit 1
            fi
      - destroy-environment
      - revert-migrations
      # Here's where you will add some code to rollback on failure  
  cloudfront-update:
    docker:
      - image: cimg/base:2022.04
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Saving the old WorkflowID to KVDB bucket
          command: |
            export OldWorkflowID="$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)"
            echo "The Old WorkFlow ID is: $OldWorkflowID"
            
            curl -d "$OldWorkflowID" https://kvdb.io/2bqfdFsNU2jCvgyEVGiGHF/success_/Old_Workflow_ID 
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name "udapeople-CloudFront-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople    
      - destroy-environment
      - revert-migrations

  cleanup:
      docker:
        - image: cimg/base:2022.04 
      steps:
        - checkout
        - install_awscli
        - attach_workspace:
            at: ~/
        - run:
            name: Remove the old stacks from our production phase
            command: |
              export STACKS=($(aws cloudformation list-stacks \ 
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo Stack names: "${STACKS[@]}"
              export OldWorkflowID=$(curl --insecure https://kvdb.io/2bqfdFsNU2jCvgyEVGiGHF/success_/Old_Workflow_ID)
              echo "The old Workflow_ID: $OldWorkflowID"
              if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              else
                echo "No stacks to be deleted"
              fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]